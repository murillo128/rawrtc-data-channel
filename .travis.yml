# Use container system
sudo: false

# Build matrix
language: c
matrix:
  include:
    - os: linux
      dist: precise
      compiler: gcc
      addons:
        apt:
          sources:
            - george-edison55-precise-backports
          packages:
            - cmake
            - cmake-data
# TODO: Re-enable once precise upgraded to OpenSSL >= 1.0.2
#    - os: linux
#      dist: precise
#      compiler: gcc
#      env: ENFORCE_OPENSSL=1
    - os: linux
      dist: precise
      compiler: clang
      addons:
        apt:
          sources:
            - george-edison55-precise-backports
          packages:
            - cmake
            - cmake-data
# TODO: Re-enable once precise upgraded to OpenSSL >= 1.0.2
#    - os: linux
#      dist: precise
#      compiler: clang
#      env: ENFORCE_OPENSSL=1
    - os: linux
      dist: trusty
      compiler: gcc
# TODO: Re-enable once trusty upgraded to OpenSSL >= 1.0.2
#    - os: linux
#      dist: trusty
#      compiler: gcc
#      env: ENFORCE_OPENSSL=1
    - os: linux
      dist: trusty
      compiler: clang
# TODO: Re-enable once trusty upgraded to OpenSSL >= 1.0.2
#    - os: linux
#      dist: trusty
#      compiler: clang
#      env: ENFORCE_OPENSSL=1
    - os: osx
      osx_image: xcode7.3
      compiler: clang
    - os: osx
      osx_image: xcode7.3
      compiler: clang
      env: ENFORCE_OPENSSL=1
    - os: osx
      osx_image: xcode8.3
      compiler: clang
    - os: osx
      osx_image: xcode8.3
      compiler: clang
      env: ENFORCE_OPENSSL=1

# Linux dependencies
addons:
  apt:
    packages:
      - git
      - pkg-config
      - libssl-dev

# OSX dependencies
before_install:
  - >
    if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      brew update || travis_terminate 1;
      cmake --version || brew install cmake || travis_terminate 1;
      brew install --force openssl || travis_terminate 1;
      export PKG_CONFIG_PATH=/usr/local/opt/openssl/lib/pkgconfig:${PKG_CONFIG_PATH}
    fi

# Make library dependencies
install:
  - ./make-dependencies.sh

# Set environment vars & enable core dumps
before_script:
  - export BUILD_PATH=$HOME/build/rawrtcdc/rawrtcdc/build
  - export LD_LIBRARY_PATH=${BUILD_PATH}/prefix/lib:${LD_LIBRARY_PATH}
  - export PATH=${BUILD_PATH}/prefix/bin:${PATH}

# Install library and run tests
script:
  - cd build
  - >
    cmake
    -DCMAKE_INSTALL_PREFIX=${BUILD_PATH}/prefix
    -DCMAKE_C_FLAGS="-Werror -Wall -Wno-unused-function"
    .. && make install
#  - make test
